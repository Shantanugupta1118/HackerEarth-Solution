

    //#define INTERACTIVE
    #include <bits/stdc++.h>
    #include <ext/pb_ds/assoc_container.hpp> // gp_hash_table<int, int> == hash map
    #include <ext/pb_ds/tree_policy.hpp>
    using namespace std;
    using namespace __gnu_pbds;
    typedef long long ll;
    typedef unsigned long long ull;
    typedef long double ld;
    typedef pair<int, int> pii;
    typedef pair<ll, ll> pll;
    typedef pair<double, double> pdd;
    template <typename T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
    template <typename T> using max_heap = priority_queue<T, vector<T>, less<T>>;
    template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; 
    template <typename K, typename V> using hashmap = gp_hash_table<K, V>;
     
    template<typename A, typename B> ostream& operator<<(ostream& out, pair<A, B> p) { out << "(" << p.first << ", " << p.second << ")"; return out;}
    template<typename T> ostream& operator<<(ostream& out, vector<T> v) { out << "["; for(auto& x : v) out << x << ", "; out << "]";return out;}
    template<typename T> ostream& operator<<(ostream& out, set<T> v) { out << "{"; for(auto& x : v) out << x << ", "; out << "}"; return out; }
    template<typename K, typename V> ostream& operator<<(ostream& out, map<K, V> m) { out << "{"; for(auto& e : m) out << e.first << " -> " << e.second << ", "; out << "}"; return out; }
    template<typename K, typename V> ostream& operator<<(ostream& out, hashmap<K, V> m) { out << "{"; for(auto& e : m) out << e.first << " -> " << e.second << ", "; out << "}"; return out; }
     
    #define FAST_IO ios_base::sync_with_stdio(false); cin.tie(NULL)
    #define TESTS(t) int NUMBER_OF_TESTS; cin >> NUMBER_OF_TESTS; for(int t = 1; t <= NUMBER_OF_TESTS; t++)
    #define FOR(i, begin, end) for (int i = (begin); i < (end); i++)
    #define sgn(a)     ((a) > eps ? 1 : ((a) < -eps ? -1 : 0))
    #define precise(x) fixed << setprecision(x)
    #define pb push_back
    #define rnd(a, b) (uniform_int_distribution<int>((a), (b))(rng))
    #ifndef LOCAL
        #define cerr if(0)cout
        #ifndef INTERACTIVE
            #define endl "\n"
        #endif
        #define debug(args...) if(0){}
    #else
        #define debug(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); dbg(_it, true, args); }
        void dbg(istream_iterator<string> it, bool isStart) {cerr << "</debug>" << endl;}
        template<typename T, typename... Args>
        void dbg(istream_iterator<string> it, bool isStart, T a, Args... args) {
            if(isStart) cerr << "<debug>" << endl;
            cerr << "  " << *it << " = " << a << endl;
            dbg(++it, false, args...);
        }
    #endif
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    clock_t __clock__;
    void startTime() {__clock__ = clock();}
    void timeit(string msg) {cerr << "> " << msg << ": " << precise(6) << ld(clock()-__clock__)/CLOCKS_PER_SEC << endl;}
    template<typename T> inline bool maxi(T& a, T b) { return b > a ? (a = b, true) : false; }
    template<typename T> inline bool mini(T& a, T b) { return b < a ? (a = b, true) : false; }
    const ld PI = asin(1) * 2;
    const ld eps = 1e-12;
    const int oo = 2e9;
    const ll OO = 2e18;
    const ll MOD = 1000000007;
    const int MAXN = 500;
     
    int n, k;
    vector<pii> adj[MAXN];
     
    pii dfs(int u, int from=-1) {
        // debug(u, from);
        int toDelete = 0;
        int maxDist = 0;
        vector<int> dists;
        for(auto e : adj[u]) {
            int v = e.first;
            int w = e.second;
            if(v == from) continue;
            auto res = dfs(v, u);
            toDelete += res.second;
            res.first += w;
            if(res.first > k) {
                toDelete++;
            } else {
                dists.pb(res.first);
            }
        }
     
        sort(dists.begin(), dists.end());
        debug(u, dists, toDelete);
        while(dists.size() > 1) {
            int last = dists[dists.size()-1];
            int sndLast = dists[dists.size()-2];
            if(last+sndLast > k) {
                toDelete++;
                dists.pop_back();
            } else {
                break;
            }
        }
        if(!dists.empty()) {
            maxDist = dists.back();
        }
     
        // debug(u, maxDist, toDelete);
     
        return {maxDist, toDelete};
    }
     
    int main() {
        FAST_IO;
        startTime();
     
        cin >> n >> k;
        FOR(i, 0, n-1) {
            int u, v, w;
            cin >> u >> v >> w;
            u--, v--;
            adj[u].pb({v,w});
            adj[v].pb({u,w});
        }
        cout << dfs(0).second+1 << endl;
     
        timeit("Finished");
    }

